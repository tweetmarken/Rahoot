{"version":3,"sources":["routes/HomeRoute/styles.module.css","utils/Game.js","routes/JoinRoute.js","utils/TimeCounter.js","routes/PlayerRoute.js","routes/HomeRoute/index.js","routes/QuestionResultsRoute.js","utils/Question.js","routes/CurrentQuestionRoute.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Game","gameId","JSON","parse","atob","apiKey","baseId","Airtable","configure","endpointUrl","this","game","base","getAllQuestions","bind","startNextQuestion","getCurrentQuestion","playerName","create","then","record","getId","playerId","find","answer","undefined","question","Error","select","sort","field","direction","all","questionId","get","answerIds","formula","map","id","join","filterByFormula","maxRecords","firstPage","nextQuestions","nextQuestion","finishedTime","Date","now","update","toISOString","records","data","questions","q","JoinForm","setPlayerName","joinGame","FormGroup","Label","Input","value","onChange","e","target","Button","color","onClick","PlayRoute","props","useParams","useState","setPlayerId","Container","style","maxWidth","to","addPlayer","calculateTimeLeft","date","difference","TimeCounter","till","className","timeLeft","setTimeLeft","setTimeout","Math","floor","AnswerGrid","recordAnswer","Row","ans","Col","sm","md","key","PlayerRoute","setQuestion","errorMessage","setErrorMessage","useEffect","getPlayer","player","addAnswer","catch","Alert","generateGameId","window","btoa","stringify","JoinUrl","disabled","placeholder","location","encodeURI","HomeRoute","setApiKey","setBaseId","styles","hero_heading","Form","for","ResultBoard","result","Object","entries","players","length","a","getAnswers","answers","reduce","acc","concat","QuestionResultsRoute","setResult","calculateResult","Question","Card","CardBody","CardTitle","CardText","CurrentQuestionRoute","App","path","JoinRoute","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.35af8e82.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"hero_heading\":\"styles_hero_heading__1odbt\"};","import Airtable from 'airtable';\n\nclass Game {\n  constructor({ gameId }) {\n    const { apiKey, baseId } = JSON.parse(atob(gameId))\n    Airtable.configure({endpointUrl: 'https://api.airtable.com', apiKey})\n    this.game = Airtable.base(baseId)\n\n    this.getAllQuestions = this.getAllQuestions.bind(this)\n    this.startNextQuestion = this.startNextQuestion.bind(this)\n    this.getCurrentQuestion = this.getCurrentQuestion.bind(this)\n  }\n\n  addPlayer(playerName) {\n    return this.game('Players')\n      .create({\"Name\": playerName})\n      .then(record => record.getId())\n      // .catch\n  }\n\n  getPlayer(playerId) {\n    return this.game('Players')\n      .find(playerId)\n  }\n\n  async addAnswer(playerId, answer) {\n    const question = await this.getCurrentQuestion()\n    if (question === undefined) {\n      throw new Error(\"Question has not started!\")\n    }\n\n    return this.game('Answers')\n      .create({\n        \"Answer\": answer,\n        \"Player\": [ playerId ],\n        \"Question\": [ question.getId() ]\n      })\n      .then(record => { return { answer: record, question: question }})\n      // .catch\n  }\n\n  getAllQuestions() {\n    return this.game('Questions')\n      .select({ sort: [{field: \"Order\", direction: \"asc\"}] })\n      .all()\n  }\n\n  async getAnswers(questionId) {\n    let answerIds = await this.game('Questions')\n      .find(questionId)\n      .then(record => record.get('Answers'))\n    if (answerIds === undefined) { answerIds = [] }\n\n    const formula = `OR(${answerIds.map(id => `RECORD_ID()=\"${id}\"`).join(',')})`\n\n    return this.game('Answers')\n      .select({\n        filterByFormula: formula\n      })\n      .all()\n  }\n\n  async startNextQuestion() {\n    const nextQuestions = await this.game('Questions')\n      .select({\n        filterByFormula: `{Finished At} = BLANK()`,\n        maxRecords: 1,\n        sort: [{field: \"Order\", direction: \"asc\"}],\n      })\n      .firstPage()\n\n    const nextQuestion = nextQuestions[0]\n    if (nextQuestion === undefined) {\n      return\n    }\n\n    // add 20 seconds\n    const finishedTime = new Date(Date.now() + 20000)\n    const [, records] = await this.game('Questions').update([\n      {\n        \"id\": nextQuestion.id,\n        \"fields\": { \"Finished At\": `${finishedTime.toISOString()}` }\n      }\n    ])\n\n    return records\n  }\n\n  async getCurrentQuestion() {\n    let data = null\n    // filters seem to take longer to update, so we do it ourselves\n    await this.getAllQuestions()\n      .then(questions => {\n        data = questions.find(q => {\n          let finished = q.get('Finished At') ? new Date(q.get('Finished At')) : new Date() + 1\n          return finished > new Date()\n        })\n      })\n\n    return data\n  }\n}\n\nexport default Game\n","import React, { useState } from 'react'\nimport { useParams, Redirect } from \"react-router-dom\"\nimport { Button, Container, FormGroup, Label, Input } from 'reactstrap';\n\nimport Game from '../utils/Game'\n\n\nconst JoinForm = ({ playerName, setPlayerName, joinGame }) => {\n  return (\n    <div>\n      <FormGroup>\n        <Label>Name:</Label>\n        <Input\n          value={playerName}\n          onChange={e => setPlayerName(e.target.value)}\n        />\n      </FormGroup>\n      <Button color=\"primary\" onClick={joinGame}>JOIN</Button>\n    </div>\n  )\n}\n\nconst PlayRoute = props => {\n  let { gameId } = useParams()\n  const [playerName, setPlayerName] = useState('')\n  const [playerId, setPlayerId] = useState('')\n  const game = new Game({ gameId })\n\n  return (\n    <Container style={{maxWidth: \"500px\"}}>\n      {playerId ?\n          <Redirect\n            to={`/games/${gameId}/players/${playerId}`}\n          />\n        : <JoinForm\n          playerName={playerName}\n          setPlayerName={setPlayerName}\n          joinGame={() => {\n            game\n            .addPlayer(playerName)\n            .then(setPlayerId)\n          }}\n        />\n      }\n    </Container>\n  )\n}\n\nexport default PlayRoute\n","import React, { useState } from 'react';\n\nexport const calculateTimeLeft = date => {\n  const difference = (date - Date.now())/1000\n  return difference > 0 ? difference : 0\n}\n\nexport const TimeCounter = ({ till, className }) => {\n  // there's apparently a memory leak, need to useEffect\n  const [ timeLeft, setTimeLeft ] = useState(calculateTimeLeft(till))\n  setTimeout(() => setTimeLeft(calculateTimeLeft(till)), 1000)\n\n  return <div className={className}>\n    {timeLeft > 0 ? Math.floor(timeLeft) : 0} seconds left\n  </div>\n}\n","import React, { useState, useEffect } from 'react'\nimport { useParams } from \"react-router-dom\"\nimport { Button, Container, Row, Col, Alert } from 'reactstrap';\n\nimport Game from '../utils/Game'\nimport { TimeCounter } from '../utils/TimeCounter'\n\n\nconst AnswerGrid = ({ recordAnswer }) => {\n  return (\n    <Row>\n      {\n        ['A', 'B', 'C', 'D'].map((ans) =>\n          <Col sm={12} md={6} className=\"mb-4\" key={ans}>\n            <Button\n              className=\"w-100 h-100\"\n              onClick={() => recordAnswer(ans)}>\n                <strong>{ans}</strong>\n            </Button>\n          </Col>\n        )\n      }\n    </Row>\n  )\n}\n\nconst PlayerRoute = props => {\n  let { gameId, playerId } = useParams()\n  const [playerName, setPlayerName] = useState('')\n  const [question, setQuestion] = useState(null)\n  const [errorMessage, setErrorMessage] = useState('')\n  const game = new Game({ gameId })\n\n  useEffect(() => {\n    game.getPlayer(playerId)\n      .then(player => setPlayerName(player.get('Name')))\n  }, [])\n\n  const recordAnswer = ans => {\n    game\n      .addAnswer(playerId, ans)\n      .then(({ question }) => {\n        setQuestion(question)\n        setErrorMessage('')\n      })\n      .catch(e => {\n        setErrorMessage(e)\n        setTimeout(() => setErrorMessage(''), 5000)\n      })\n  }\n\n  return (\n    <Container style={{maxWidth: \"500px\"}}>\n      <Row className=\"mb-4\">\n        <Col sm={12}>\n          <h2>Hi {playerName}!</h2>\n          <h3>Choose your answer:</h3>\n        </Col>\n      </Row>\n      <AnswerGrid recordAnswer={recordAnswer}/>\n      {question ? <TimeCounter till={new Date(question.get('Finished At'))} /> : null }\n      {errorMessage ? <Alert color=\"danger\">{errorMessage}</Alert> : null}\n    </Container>\n  )\n}\n\nexport default PlayerRoute\n","import React, { useState } from 'react'\nimport { Link } from \"react-router-dom\"\nimport { Button, Container, Form, FormGroup, Label, Input } from 'reactstrap';\n\nimport styles from './styles.module.css'\n\n\nconst generateGameId = (apiKey, baseId) => {\n  return window.btoa(JSON.stringify({apiKey, baseId}))\n}\n\nconst JoinUrl = ({ apiKey, baseId }) => {\n  const gameId = generateGameId(apiKey, baseId)\n  return (\n    <FormGroup>\n      <Label>Join URL:</Label>\n      <Input\n        disabled\n        placeholder={\"Enter an API Key and Base ID to generate the URL\"}\n        value={apiKey && baseId ? `${window.location}games/${encodeURI(gameId)}/join` : null}\n      />\n    </FormGroup>\n  )\n}\n\nconst HomeRoute = props => {\n  const [apiKey, setApiKey] = useState('');\n  const [baseId, setBaseId] = useState('');\n  const gameId = generateGameId(apiKey, baseId)\n  return (\n    <Container style={{maxWidth: \"500px\"}}>\n      <h1 className={styles.hero_heading}>Cahoots!</h1>\n      <Form className=\"mb-5\">\n        <FormGroup>\n          <Label for=\"apiKey\">API Key:</Label>\n          <Input id=\"apiKey\" value={apiKey} onChange={e => setApiKey(e.target.value)} />\n        </FormGroup>\n        <FormGroup>\n          <Label>Base ID:</Label>\n          <Input value={baseId} onChange={e => setBaseId(e.target.value)} />\n        </FormGroup>\n        <JoinUrl apiKey={apiKey} baseId={baseId} />\n      </Form>\n\n      <Link to={`/games/${encodeURI(gameId)}/questions/current`}>\n        <Button color=\"primary\">Start Game</Button>\n      </Link>\n    </Container>\n  )\n}\n\nexport default HomeRoute\n","import React, { useEffect, useState } from 'react'\nimport { useParams, Link } from \"react-router-dom\"\nimport { Button, Container } from 'reactstrap';\n\nimport Game from '../utils/Game'\n\n\nconst ResultBoard = ({ result, className }) => {\n  return (\n    <div className={className}>\n      {Object.entries(result).map(([answer, players]) => {\n        return <div>{answer}: {players.length}</div>\n      })}\n    </div>\n  )\n}\n\nasync function calculateResult(game, questionId) {\n  let answers = await game.getAnswers(questionId)\n  // group by answers\n  return answers.reduce((acc, answer) => {\n    let value = answer.get('Answer')\n    if (acc[value] == null) {\n      acc[value] = []\n    }\n    acc[value] = acc[value].concat(answer.get('Player'))\n\n    return acc\n  }, {})\n}\n\nconst QuestionResultsRoute = props => {\n  let { gameId, questionId } = useParams()\n  let [result, setResult] = useState({})\n  const game = new Game({ gameId })\n\n  useEffect(() => {\n    calculateResult(game, questionId).then(setResult)\n  }, [])\n\n  return (\n    <Container>\n      <ResultBoard className=\"mb-4\" result={result} />\n      <Link to={`/games/${encodeURI(gameId)}/questions/current`}>\n        <Button color=\"primary\">\n          Next Question\n        </Button>\n      </Link>\n    </Container>\n  )\n}\n\nexport default QuestionResultsRoute\n\n// no result, no question, start button\n// no result, question, no buttons if time out, else show button if within time\n// have result, show result, hide question, next button (clears result)\n","import React from 'react'\nimport { Card, CardBody, Row, Col, CardTitle, CardText } from 'reactstrap';\n\n\n\nconst Question = ({ data, className }) => (\n  <div className={className}>\n    <h2 className=\"mb-4\">{data.get('Name')}</h2>\n    <Row>\n      {\n        ['A', 'B', 'C', 'D'].map((ans) =>\n          <Col sm={12} md={6} className=\"mb-4\">\n            <Card>\n              <CardBody>\n                <CardTitle><strong>{ans}</strong></CardTitle>\n                <CardText>\n                  {data.get(`Answer ${ans}`)}\n                </CardText>\n              </CardBody>\n            </Card>\n          </Col>\n        )\n      }\n    </Row>\n  </div>\n)\n\nexport default Question\n","import React, { useState, useEffect } from 'react'\nimport { useParams, Link } from \"react-router-dom\"\nimport { Button, Container } from 'reactstrap';\n\nimport Game from '../utils/Game'\nimport Question from '../utils/Question'\nimport { TimeCounter } from '../utils/TimeCounter'\n\nconst CurrentQuestionRoute = props => {\n  let { gameId } = useParams()\n  const [question, setQuestion] = useState(null)\n  const game = new Game({ gameId })\n\n  useEffect(() => {\n    game.startNextQuestion()\n    .then(() => game.getCurrentQuestion().then(setQuestion))\n  }, [])\n\n  return (\n    <Container>\n      {question ?\n          <div>\n            <Question data={question} />\n            <TimeCounter className=\"mb-4\" till={new Date(question.get('Finished At'))} />\n            <Link to={`/games/${encodeURI(gameId)}/results/${question.getId()}`}>\n              <Button color=\"primary\">Show Result</Button>\n            </Link>\n          </div>\n        : <div>Loading...</div>\n      }\n    </Container>\n  )\n}\n\nexport default CurrentQuestionRoute\n\n// no result, no question, start button\n// no result, question, no buttons if time out, else show button if within time\n// have result, show result, hide question, next button (clears result)\n","import React from 'react';\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nimport JoinRoute from './routes/JoinRoute'\nimport PlayerRoute from './routes/PlayerRoute'\nimport HomeRoute from './routes/HomeRoute';\nimport QuestionResultsRoute from './routes/QuestionResultsRoute';\nimport CurrentQuestionRoute from './routes/CurrentQuestionRoute';\n\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Switch>\n          <Route path=\"/games/:gameId/questions/current\">\n            <CurrentQuestionRoute />\n          </Route>\n          <Route path=\"/games/:gameId/results/:questionId\">\n            <QuestionResultsRoute />\n          </Route>\n          <Route path=\"/games/:gameId/players/:playerId\">\n            <PlayerRoute />\n          </Route>\n          <Route path=\"/games/:gameId/join\">\n            <JoinRoute />\n          </Route>\n          <Route path=\"/\">\n            <HomeRoute />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["routes/HomeRoute/styles.module.css","utils/Game.js","utils/Question.js","utils/TimeCounter.js","routes/HostRoute.js","routes/PlayRoute.js","routes/HomeRoute/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Game","gameId","JSON","parse","atob","apiKey","baseId","Airtable","configure","endpointUrl","this","game","base","getAllQuestions","bind","startNextQuestion","getCurrentQuestion","playerName","create","then","record","getId","playerId","answer","question","select","sort","field","direction","all","questionId","find","get","undefined","answerIds","formula","map","id","join","filterByFormula","maxRecords","firstPage","nextQuestions","nextQuestion","finishedTime","Date","now","update","toISOString","records","data","questions","q","Question","className","Row","ans","Col","sm","md","Card","CardBody","calculateTimeLeft","date","difference","TimeCounter","till","useState","timeLeft","setTimeLeft","setTimeout","Math","floor","ResultBoard","result","Object","entries","players","length","setQuestion","setResult","a","getAnswers","answers","reduce","acc","value","concat","HostRoute","props","useParams","useEffect","Container","Button","color","onClick","calculateResult","JoinForm","setPlayerName","joinGame","FormGroup","Label","Input","onChange","e","target","PlayRoute","setPlayerId","style","maxWidth","addAnswer","addPlayer","generateGameId","window","btoa","stringify","JoinUrl","disabled","placeholder","location","encodeURI","HomeRoute","setApiKey","setBaseId","styles","hero_heading","Form","for","to","App","path","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.06bc01a4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"hero_heading\":\"styles_hero_heading__1odbt\"};","import Airtable from 'airtable';\n\nclass Game {\n  constructor({ gameId }) {\n    const { apiKey, baseId } = JSON.parse(atob(gameId))\n    Airtable.configure({endpointUrl: 'https://api.airtable.com', apiKey})\n    this.game = Airtable.base(baseId)\n\n    this.getAllQuestions = this.getAllQuestions.bind(this)\n    this.startNextQuestion = this.startNextQuestion.bind(this)\n    this.getCurrentQuestion = this.getCurrentQuestion.bind(this)\n  }\n\n  addPlayer(playerName) {\n    return this.game('Players')\n      .create({\"Name\": playerName})\n      .then(record => record.getId())\n      // .catch\n  }\n\n  async addAnswer(playerId, answer) {\n    const question = await this.getCurrentQuestion()\n\n    return this.game('Answers')\n      .create({\n        \"Answer\": answer,\n        \"Player\": [ playerId ],\n        \"Question\": [ question.getId() ]\n      })\n      .then(record => { return { answer: record, question: question }})\n      // .catch\n  }\n\n  getAllQuestions() {\n    return this.game('Questions')\n      .select({ sort: [{field: \"Order\", direction: \"asc\"}] })\n      .all()\n  }\n\n  async getAnswers(questionId) {\n    let answerIds = await this.game('Questions')\n      .find(questionId)\n      .then(record => record.get('Answers'))\n    if (answerIds === undefined) { answerIds = [] }\n\n    const formula = `OR(${answerIds.map(id => `RECORD_ID()=\"${id}\"`).join(',')})`\n\n    return this.game('Answers')\n      .select({\n        filterByFormula: formula\n      })\n      .all()\n  }\n\n  async startNextQuestion() {\n    const nextQuestions = await this.game('Questions')\n      .select({\n        filterByFormula: `{Finished At} = BLANK()`,\n        maxRecords: 1,\n        sort: [{field: \"Order\", direction: \"asc\"}],\n      })\n      .firstPage()\n\n    const nextQuestion = nextQuestions[0]\n    if (nextQuestion === undefined) {\n      return\n    }\n\n    // add 20 seconds\n    const finishedTime = new Date(Date.now() + 20000)\n    const [err, records] = await this.game('Questions').update([\n      {\n        \"id\": nextQuestion.id,\n        \"fields\": { \"Finished At\": `${finishedTime.toISOString()}` }\n      }\n    ])\n\n    return records\n  }\n\n  async getCurrentQuestion() {\n    let data = null\n    // filters seem to take longer to update, so we do it ourselves\n    await this.getAllQuestions()\n      .then(questions => {\n        data = questions.find(q => {\n          let finished = q.get('Finished At') ? new Date(q.get('Finished At')) : new Date + 1\n          return finished > new Date\n        })\n      })\n\n    return data\n  }\n}\n\nexport default Game\n","import React from 'react'\nimport { Card, CardBody, Row, Col } from 'reactstrap';\n\n\n\nconst Question = ({ data, className }) => (\n  <div className={className}>\n    <h2 className=\"mb-4\">{data.get('Name')}</h2>\n    <Row>\n      {\n        ['A', 'B', 'C', 'D'].map((ans) =>\n          <Col sm={12} md={6} className=\"mb-4\">\n            <Card>\n              <CardBody>\n                <strong>{ans}</strong> {data.get(`Answer ${ans}`)}\n              </CardBody>\n            </Card>\n          </Col>\n        )\n      }\n    </Row>\n  </div>\n)\n\nexport default Question\n","import React, { useState } from 'react';\n\nexport const calculateTimeLeft = date => {\n  const difference = (date - Date.now())/1000\n  return difference > 0 ? difference : 0\n}\n\nexport const TimeCounter = ({ till, className }) => {\n  // there's apparently a memory leak, need to useEffect\n  const [ timeLeft, setTimeLeft ] = useState(calculateTimeLeft(till))\n  setTimeout(() => setTimeLeft(calculateTimeLeft(till)), 1000)\n\n  return <div className={className}>\n    {timeLeft > 0 ? Math.floor(timeLeft) : 0} seconds left\n  </div>\n}\n","import React, { useState, useEffect } from 'react'\nimport { useParams } from \"react-router-dom\"\nimport { Button, Container } from 'reactstrap';\n\nimport Game from '../utils/Game'\nimport Question from '../utils/Question'\nimport { TimeCounter, calculateTimeLeft } from '../utils/TimeCounter'\n\n\nconst ResultBoard = ({ result, className }) => {\n  return (\n    <div className={className}>\n      {Object.entries(result).map(([answer, players]) => {\n        return <div>{answer}: {players.length}</div>\n      })}\n    </div>\n  )\n}\n\nconst startNextQuestion = (game, setQuestion, setResult) => {\n  game.startNextQuestion()\n    .then(() => game.getCurrentQuestion().then(setQuestion))\n    .then(() => setResult(null))\n}\n\nasync function calculateResult(game, question, setResult) {\n  let answers = await game.getAnswers(question.getId())\n  // group by answers\n  let result = answers.reduce((acc, answer) => {\n    let value = answer.get('Answer')\n    if (acc[value] == null) {\n      acc[value] = []\n    }\n    acc[value] = acc[value].concat(answer.get('Player'))\n\n    return acc\n  }, {})\n\n  setResult(result)\n}\n\nconst HostRoute = props => {\n  let { gameId } = useParams()\n  const [question, setQuestion] = useState(null)\n  const [result, setResult] = useState(null)\n  const game = new Game({ gameId })\n\n  useEffect(() => {\n    game.getCurrentQuestion().then(setQuestion)\n  }, [])\n\n  return (\n    <Container>\n      {\n        result ?\n          <div>\n            <ResultBoard className=\"mb-4\" result={result} />\n            <Button\n              color=\"primary\"\n              onClick={() => startNextQuestion(game, setQuestion, setResult) }\n            >\n              Next Question\n            </Button>\n          </div>\n        : question ?\n          <div>\n            <Question data={question} />\n            <TimeCounter className=\"mb-4\" till={new Date(question.get('Finished At'))} />\n            <Button\n              onClick={() => calculateResult(game, question, setResult) }\n              color=\"primary\"\n            >\n              Show Result\n            </Button>\n          </div>\n        :\n          <Button\n            onClick={() => startNextQuestion(game, setQuestion, setResult) }\n            color=\"primary\"\n          >\n            Start Game\n          </Button>\n      }\n    </Container>\n  )\n}\n\nexport default HostRoute\n\n// no result, no question, start button\n// no result, question, no buttons if time out, else show button if within time\n// have result, show result, hide question, next button (clears result)\n","import React, { useState } from 'react'\nimport { useParams } from \"react-router-dom\"\nimport { Button, Container, Row, Col, FormGroup, Label, Input } from 'reactstrap';\n\nimport Game from '../utils/Game'\nimport { TimeCounter } from '../utils/TimeCounter'\n\n\nconst JoinForm = ({ playerName, setPlayerName, joinGame }) => {\n  return (\n    <div>\n      <FormGroup>\n        <Label>Name:</Label>\n        <Input\n          value={playerName}\n          onChange={e => setPlayerName(e.target.value)}\n        />\n      </FormGroup>\n      <Button color=\"primary\" onClick={joinGame}>JOIN</Button>\n    </div>\n  )\n}\n\n\nconst PlayRoute = props => {\n  let { gameId } = useParams()\n  const [playerName, setPlayerName] = useState('')\n  const [playerId, setPlayerId] = useState('')\n  const [question, setQuestion] = useState(null)\n  const game = new Game({ gameId })\n\n  return (\n    <Container style={{maxWidth: \"500px\"}}>\n      {\n        playerId ?\n          <div>\n            {question ? <TimeCounter till={new Date(question.get('Finished At'))} /> : null }\n            <Row className=\"mb-4\">\n              <Col sm={12}>\n                <h2>Choose your answer:</h2>\n              </Col>\n            </Row>\n            <Row>\n              {\n                ['A', 'B', 'C', 'D'].map((ans) =>\n                  <Col sm={12} md={6} className=\"mb-4\">\n                    <Button\n                      className=\"w-100 h-100\"\n                      onClick={() => game.addAnswer(playerId, ans).then(({ question }) => setQuestion(question))}>\n                        <strong>\n                          {ans}\n                        </strong>\n                    </Button>\n                  </Col>\n                )\n              }\n            </Row>\n          </div>\n        : <JoinForm\n            playerName={playerName}\n            setPlayerName={setPlayerName}\n            joinGame={() => {\n              game\n              .addPlayer(playerName)\n              .then(setPlayerId)\n            }}\n          />\n      }\n    </Container>\n  )\n}\n\nexport default PlayRoute\n","import React, { useState } from 'react'\nimport { Link } from \"react-router-dom\"\nimport { Button, Container, Form, FormGroup, Label, Input } from 'reactstrap';\n\nimport styles from './styles.module.css'\n\n\nconst generateGameId = (apiKey, baseId) => {\n  return window.btoa(JSON.stringify({apiKey, baseId}))\n}\n\nconst JoinUrl = ({ apiKey, baseId }) => {\n  const gameId = generateGameId(apiKey, baseId)\n  return (\n    <FormGroup>\n      <Label>Join URL:</Label>\n      <Input\n        disabled\n        placeholder={\"Enter an API Key and Base ID to generate the URL\"}\n        value={apiKey && baseId ? `${window.location}games/${encodeURI(gameId)}/play` : null}\n      />\n    </FormGroup>\n  )\n}\n\nconst HomeRoute = props => {\n  const [apiKey, setApiKey] = useState('');\n  const [baseId, setBaseId] = useState('');\n  const gameId = generateGameId(apiKey, baseId)\n  return (\n    <Container style={{maxWidth: \"500px\"}}>\n      <h1 className={styles.hero_heading}>Cahoots!</h1>\n      <Form className=\"mb-5\">\n        <FormGroup>\n          <Label for=\"apiKey\">API Key:</Label>\n          <Input id=\"apiKey\" value={apiKey} onChange={e => setApiKey(e.target.value)} />\n        </FormGroup>\n        <FormGroup>\n          <Label>Base ID:</Label>\n          <Input value={baseId} onChange={e => setBaseId(e.target.value)} />\n        </FormGroup>\n        <JoinUrl apiKey={apiKey} baseId={baseId} />\n      </Form>\n\n      <Link to={`/games/${encodeURI(gameId)}/host`}>\n        <Button color=\"primary\">Host Game</Button>\n      </Link>\n    </Container>\n  )\n}\n\nexport default HomeRoute\n","import React, { useState } from 'react';\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nimport HostRoute from './routes/HostRoute'\nimport PlayRoute from './routes/PlayRoute'\nimport HomeRoute from './routes/HomeRoute';\n\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Switch>\n          <Route path=\"/games/:gameId/host\">\n            <HostRoute />\n          </Route>\n          <Route path=\"/games/:gameId/play\">\n            <PlayRoute />\n          </Route>\n          <Route path=\"/\">\n            <HomeRoute />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}